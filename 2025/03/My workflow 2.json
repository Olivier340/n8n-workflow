{"createdAt":"2025-03-21T09:26:35.429Z","updatedAt":"2025-03-26T05:29:36.930Z","id":"Nd72USRQbgjcp61H","name":"My workflow 2","active":false,"nodes":[{"parameters":{"url":"={{ $node[\"setFields\"].json[\"urlGithub\"] }}","authentication":"predefinedCredentialType","nodeCredentialType":"githubOAuth2Api","options":{"batching":{"batch":{"batchSize":1}}}},"type":"n8n-nodes-base.httpRequest","typeVersion":4.2,"position":[460,80],"id":"3e4ad204-8350-4408-8112-b6bebb85beb1","name":"HTTP Request1","credentials":{"githubOAuth2Api":{"id":"yf4MRzy0qmMObkWx","name":"GitHub account"}}},{"parameters":{"assignments":{"assignments":[{"id":"5edf0f4a-e6fd-4279-836e-fba023ba366a","name":"urlGithub","value":"=https://api.github.com/repos/{{ $json[\"Url du de la documentation du dépôt Github\"].match(/^https:\\/\\/github\\.com\\/(.+)$/)[1] }}/git/trees/main?recursive=1","type":"string"},{"id":"07ebc0fc-db46-4e82-bc49-6bf8688a43ab","name":"urlDrive","value":"={{ $json['Url de votre répertoire Drive'].match(/[-\\w]{25,}/)[0] }}","type":"string"},{"id":"926aea52-c4db-4bfc-bc6b-65fc946f1c00","name":"pathDrive","value":"={{ $json['Path Sous-répertoire'] }}","type":"string"},{"id":"99c95f44-a43c-45de-bcd4-bfdcc1bba245","name":"extensions","value":"=[\"md\"]","type":"array"},{"id":"eb7c34e4-a9b9-4b25-a8d9-4dc58f925ba0","name":"pathGithub","value":"={{ $json[\"Url du de la documentation du dépôt Github\"].match(/^https:\\/\\/github\\.com\\/(.+)$/)[1] }}","type":"string"},{"id":"bad4ab79-177c-4a11-b764-3ac3927cb4e9","name":"folderGithub","value":"={{ $json[\"Url du de la documentation du dépôt Github\"].split('/').slice(-1)[0]?.trim() }}","type":"string"},{"id":"1ed6a58e-b0f3-40cb-a359-f4d06ff12923","name":"folderDocs","value":"docs","type":"string"},{"id":"ba07bede-a304-45e0-a51b-37aea2bcfe14","name":"parentFolderName","value":"Documentation Rag","type":"string"},{"id":"70dbd039-5432-4320-bfb4-726f52c8c40a","name":"idFolderMain","value":"={{ $json.id || $('Google Drive2').json.id }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[220,100],"id":"d0de3cf3-5d37-4632-b32e-86337b739636","name":"setFields"},{"parameters":{"authentication":"oAuth2","resource":"folder","name":"={{ $('getFolder').item.json.path }}","options":{"parents":["={{ $json.parentId }}"]}},"name":"get drive folder1","type":"n8n-nodes-base.googleDrive","typeVersion":1,"position":[1880,-20],"id":"f4a59a5b-4b07-400d-80cd-7ae6a119bf01","alwaysOutputData":true,"credentials":{"googleDriveOAuth2Api":{"id":"Mu7yxTxQSL3Ke6rX","name":"Google Drive account"}}},{"parameters":{"assignments":{"assignments":[{"id":"b206d289-a89a-4722-acc5-65478b5c2b3b","name":"Url du de la documentation du dépôt Github","value":"https://github.com/Olivier340/n8n-docs","type":"string"},{"id":"2a13b915-b445-49f8-9203-1d8f1d40be56","name":"Url de votre répertoire Drive","value":"https://drive.google.com/drive/folders/1YCugN9LL7YlgkrK89ucRo6gZQuhGN3zB","type":"string"},{"id":"b510a045-b7c2-4689-b4d9-f1c5a5d870ce","name":"Path Sous-répertoire","value":"docs","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[-340,80],"id":"cd26d55c-42a2-40b8-8ac7-f9a41261cfe2","name":"Edit Fields"},{"parameters":{},"type":"n8n-nodes-base.manualTrigger","typeVersion":1,"position":[-560,80],"id":"0304db38-1f21-4386-8f4c-b4fabafb5130","name":"When clicking ‘Test workflow’"},{"parameters":{"resource":"folder","name":"={{ $json[\"Url du de la documentation du dépôt Github\"].split('/').slice(-1)[0] }}","driveId":{"__rl":true,"mode":"list","value":"My Drive"},"folderId":{"__rl":true,"value":"={{ $json['Url de votre répertoire Drive'].match(/[-\\w]{25,}/)[0] }}","mode":"id"},"options":{}},"type":"n8n-nodes-base.googleDrive","typeVersion":3,"position":[-160,280],"id":"bd831516-82ee-4178-b7ee-d52a95b3a8f4","name":"Google Drive2","credentials":{"googleDriveOAuth2Api":{"id":"Mu7yxTxQSL3Ke6rX","name":"Google Drive account"}}},{"parameters":{"mode":"combine","combineBy":"combineByPosition","options":{}},"type":"n8n-nodes-base.merge","typeVersion":3,"position":[20,100],"id":"fc7606ae-ed9f-4747-9c7c-aa220ade2710","name":"Merge"},{"parameters":{"assignments":{"assignments":[{"id":"4498f57e-89e7-4038-91b4-bc55c15f7a87","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"88bff86a-50ba-4825-97e5-f6a381460cb4","name":"path","value":"={{ $('getFolder').first().json.path }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2400,-20],"id":"2b4cfd6c-6b65-4262-b760-807680cbf0a2","name":"Stockage IDs"},{"parameters":{"assignments":{"assignments":[{"id":"4498f57e-89e7-4038-91b4-bc55c15f7a87","name":"id","value":"={{ $json.id }}","type":"string"},{"id":"88bff86a-50ba-4825-97e5-f6a381460cb4","name":"path","value":"={{ $('Loop Over Items').item.json.path }}","type":"string"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[2080,-260],"id":"ac7d4499-367a-45b4-b881-56c593e81a77","name":"Stockage IDs1"},{"parameters":{"assignments":{"assignments":[{"id":"8370fa54-821c-4766-abee-13e3aecf0250","name":"index","value":0,"type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[580,800],"id":"21b776c0-0607-4d69-801a-093c80b9ba4e","name":"Initialiser index"},{"parameters":{"assignments":{"assignments":[{"id":"8370fa54-821c-4766-abee-13e3aecf0250","name":"index","value":"={{ $json.index +1}}","type":"number"}]},"options":{}},"type":"n8n-nodes-base.set","typeVersion":3.4,"position":[1000,800],"id":"a9cb89c2-e79f-433e-9390-22744f8ae581","name":"Incrémenter Index"},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"2309020c-b8aa-4fff-a713-ae123c202126","leftValue":"={{ $json.index }}","rightValue":8,"operator":{"type":"number","operation":"gt"}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1600,800],"id":"4ab4a873-8991-4cd5-9bfd-4df1bf716e5d","name":"Test Index"},{"parameters":{},"type":"n8n-nodes-base.noOp","typeVersion":1,"position":[1860,760],"id":"e4178e2d-329d-4953-9678-d50ae8407d14","name":"Fin Boucle"},{"parameters":{"authentication":"oAuth2","resource":"folder","name":"={{ $json[\"path\"].split('/').pop() }}","options":{"parents":["={{ $json.parentId }}"]}},"name":"get drive folder","type":"n8n-nodes-base.googleDrive","typeVersion":1,"position":[1300,780],"id":"48c5d252-5598-4824-9e38-7bac866f5d79","alwaysOutputData":true,"credentials":{"googleDriveOAuth2Api":{"id":"Mu7yxTxQSL3Ke6rX","name":"Google Drive account"}}},{"parameters":{"conditions":{"options":{"caseSensitive":true,"leftValue":"","typeValidation":"strict","version":2},"conditions":[{"id":"866306b1-28e4-48e6-9a50-db410d1997ed","leftValue":"={{$('Stockage IDs').item.json?.id }}","rightValue":"","operator":{"type":"string","operation":"exists","singleValue":true}}],"combinator":"and"},"options":{}},"type":"n8n-nodes-base.if","typeVersion":2.2,"position":[1820,440],"id":"f5ba572a-6126-4adb-8132-47fa05b7785d","name":"If"},{"parameters":{"jsCode":"async function createFolder(name, parentId) {\n    const result = await $node['HTTP Request2'].execute({\n        method: 'POST',\n        url: 'https://www.googleapis.com/drive/v3/files',\n        headers: {\n            Authorization: `Bearer {{$credentials.googleDriveOAuth2Api.accessToken}}`,\n            'Content-Type': 'application/json'\n        },\n        body: {\n            name,\n            mimeType: 'application/vnd.google-apps.folder',\n            parents: [parentId]\n        }\n    });\n\n    if (!result || !result.id) {\n        throw new Error('La création du dossier a échoué.');\n    }\n\n    // ✅ Retourner sous forme de tableau d'objets JSON\n    return [{ json: { id: result.id, name } }];\n}\n\n// Exemple d'appel\nreturn await createFolder('Nouveau Dossier', '1YCugN9LL7YlgkrK89ucRo6gZQuhGN3zB');\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1360,340],"id":"bf2a8a31-a27f-4fd7-8568-8ec9e86e01dd","name":"Code1"},{"parameters":{"amount":2},"type":"n8n-nodes-base.wait","typeVersion":1.1,"position":[2140,-20],"id":"311e9a53-09c7-44fa-8737-31d86af70a6f","name":"Wait","webhookId":"a0a51ca8-c942-449f-a619-4bb7d42d17a7"},{"parameters":{"jsCode":"const items = $input.all();\nconst folderSet = new Set();\n\nfor (const item of items) {\n  const filePath = item.json.path;\n\n  // On s'assure que le fichier est bien dans \"docs/\"\n  if (filePath.startsWith('docs/')) {\n    const parts = filePath.split('/');\n\n    // Supprimer le nom du fichier (dernier élément) pour ne garder que les dossiers\n    parts.pop();\n\n    // On construit chaque sous-niveau et on ajoute dans un Set pour éviter les doublons\n    let currentPath = '';\n    for (const part of parts) {\n      currentPath += (currentPath ? '/' : '') + part;\n      folderSet.add(currentPath);\n    }\n  }\n}\n\n// Retourner tous les chemins de répertoires uniques sous forme d'items n8n\nreturn Array.from(folderSet).map(path => ({ json: { path } }));\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[940,80],"id":"b9d94321-ba3b-4c4b-9105-c1dfd1a5394e","name":"getFolder"},{"parameters":{"jsCode":"try {\n  // ✅ Vérification de la présence des données d'entrée\n  if (!$input || typeof $input.all !== 'function') {\n    throw new Error(\"Aucune donnée d'entrée fournie !\");\n  }\n\n  // ✅ Récupérer tous les éléments d'entrée\n  const items = $input.all();\n\n  // ✅ Vérification que les données sont bien sous forme de tableau\n  if (!Array.isArray(items) || !items.length) {\n    throw new Error(\"Les données d'entrée ne sont pas au format attendu !\");\n  }\n\n  // ✅ Vérification de la présence du nœud 'setFields'\n  if (!$node[\"setFields\"] || !$node[\"setFields\"].json) {\n    throw new Error(\"Le nœud 'setFields' est manquant ou mal configuré !\");\n  }\n\n  // ✅ Récupérer les extensions depuis le nœud 'setFields'\n  let rawExtensions = $node[\"setFields\"].json.extensions;\n\n  // ✅ LOG POUR DEBUG → Vérifie ce qui est réellement présent dans le champ extensions\n  console.log(\"➡️ Extensions trouvées dans le nœud setFields:\", rawExtensions);\n\n  // ✅ Si `rawExtensions` est null ou undefined → le remplacer par un tableau vide\n  if (rawExtensions == null) {\n    console.warn(\"⚠️ Le champ 'extensions' est null ou undefined → Conversion en tableau vide.\");\n    rawExtensions = [];\n  }\n\n  // ✅ Si `rawExtensions` est un objet, convertir uniquement les clés qui sont à `true`\n  if (typeof rawExtensions === 'object' && !Array.isArray(rawExtensions)) {\n    console.warn(\"⚠️ Le champ 'extensions' est un objet. Conversion en tableau basée sur les clés à `true`...\");\n    rawExtensions = Object.keys(rawExtensions).filter(key => rawExtensions[key] === true);\n  }\n\n  // ✅ Vérification que les extensions sont bien sous forme de tableau\n  if (!Array.isArray(rawExtensions)) {\n    throw new Error(`Le champ 'extensions' doit être un tableau. Type trouvé : ${typeof rawExtensions}`);\n  }\n\n  // ✅ Nettoyer le tableau en supprimant les valeurs vides ou non valides\n  rawExtensions = rawExtensions\n    .map(ext => typeof ext === 'string' ? ext.trim() : null) // Nettoyage des espaces\n    .filter(ext => ext !== null && ext !== '');\n\n  // ✅ LOG POUR DEBUG → Vérification après nettoyage\n  console.log(\"➡️ Extensions après nettoyage :\", rawExtensions);\n\n  // ✅ Si le tableau est encore vide après nettoyage → Afficher une alerte (pas une erreur)\n  if (!rawExtensions.length) {\n    console.warn(\"⚠️ Le champ 'extensions' est vide après nettoyage → Vérifie la configuration !\");\n    throw new Error(\"Aucune extension valide trouvée dans le champ 'extensions' du nœud 'setFields' !\");\n  }\n\n  // ✅ Conversion en format `.extension`\n  const allowedExtensions = rawExtensions.map(ext => `.${ext.toLowerCase()}`);\n\n  // ✅ LOG POUR DEBUG → Vérification du tableau final\n  console.log(\"✅ Extensions autorisées après conversion :\", allowedExtensions);\n\n  // ✅ Récupérer le chemin du sous-répertoire depuis le nœud 'setFields'\n  const subdirectoryPath = $node[\"setFields\"].json['folderDocs'] || '';\n\n  // ✅ Vérification du chemin de répertoire\n  if (typeof subdirectoryPath !== 'string' || subdirectoryPath.trim() === '') {\n    throw new Error(\"Chemin du sous-répertoire invalide !\");\n  }\n\n  // ✅ Initialiser un tableau pour stocker les fichiers filtrés\n  const filteredFiles = [];\n\n  // ✅ Parcourir chaque élément d'entrée\n  for (const item of items) {\n    // Vérification de l'existence de l'arbre de fichiers\n    if (item.json && Array.isArray(item.json.tree)) {\n      for (const file of item.json.tree) {\n        if (file.path && file.url) {\n          // ✅ Extraire l'extension du fichier\n          const fileExtension = `.${file.path.split('.').pop().toLowerCase()}`;\n\n          // ✅ Vérifier si le fichier est dans le sous-répertoire spécifié\n          if (\n            file.path.startsWith(subdirectoryPath) &&\n            allowedExtensions.includes(fileExtension)\n          ) {\n            filteredFiles.push({\n              json: { path: file.path, url: file.url }\n            });\n          }\n        }\n      }\n    }\n  }\n\n  // ✅ Vérification finale si aucun fichier n'a été trouvé\n  if (!filteredFiles.length) {\n    console.warn(\"⚠️ Aucun fichier correspondant n'a été trouvé !\");\n  }\n\n  // ✅ Retourner les fichiers filtrés\n  return filteredFiles;\n\n} catch (error) {\n  console.error(`❌ Erreur détectée : ${error.message}`);\n  throw new Error(`Erreur : ${error.message}`);\n}\n"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[700,80],"id":"2da65bd9-d6ba-4076-9774-62c01bcca9f3","name":"filterFic"},{"parameters":{"jsCode":"// Dans un Code Node en amont de \"get drive folder1\"\nlet parentId;\ntry {\n  const stockageNodes = $('Stockage IDs').all(); \n  const found = stockageNodes.find(item => item.json.path === parentPath);\n  parentId = found ? found.json.id : $('setFields').first().json.idFolderMain;\n} catch (error) {\n  // Fallback si Stockage IDs est indisponible\n  parentId = $('setFields').first().json.idFolderMain;\n}\n\n// On stocke parentId dans item.json pour la suite\nreturn [{ json: { parentId } }];"},"type":"n8n-nodes-base.code","typeVersion":2,"position":[1560,-20],"id":"f384ced1-4911-44fc-9148-cb1b96505382","name":"setParentId"}],"connections":{"HTTP Request1":{"main":[[{"node":"filterFic","type":"main","index":0}]]},"setFields":{"main":[[{"node":"HTTP Request1","type":"main","index":0}]]},"get drive folder1":{"main":[[{"node":"Wait","type":"main","index":0}]]},"Edit Fields":{"main":[[{"node":"Google Drive2","type":"main","index":0},{"node":"Merge","type":"main","index":0}]]},"When clicking ‘Test workflow’":{"main":[[{"node":"Edit Fields","type":"main","index":0}]]},"Google Drive2":{"main":[[{"node":"Merge","type":"main","index":1}]]},"Merge":{"main":[[{"node":"setFields","type":"main","index":0}]]},"Stockage IDs":{"main":[[{"node":"setParentId","type":"main","index":0}]]},"Stockage IDs1":{"main":[[]]},"Initialiser index":{"main":[[{"node":"Incrémenter Index","type":"main","index":0}]]},"Incrémenter Index":{"main":[[]]},"Test Index":{"main":[[{"node":"Fin Boucle","type":"main","index":0}],[{"node":"Incrémenter Index","type":"main","index":0}]]},"get drive folder":{"main":[[]]},"If":{"main":[[]]},"Wait":{"main":[[{"node":"Stockage IDs","type":"main","index":0}]]},"getFolder":{"main":[[{"node":"setParentId","type":"main","index":0}]]},"filterFic":{"main":[[{"node":"getFolder","type":"main","index":0}]]},"setParentId":{"main":[[{"node":"get drive folder1","type":"main","index":0}]]}},"settings":{"executionOrder":"v1"},"staticData":null,"meta":{"templateCredsSetupCompleted":true},"pinData":{},"versionId":"38c61176-0458-490e-b6e4-6d4f3d334146","triggerCount":0,"tags":[],"repo_owner":"Olivier340","repo_name":"n8n-workflow","repo_path":"","subPath":"2025/03/"}